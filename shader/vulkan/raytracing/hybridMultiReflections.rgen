#version 460
#extension GL_NV_ray_tracing : require

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 view;
	mat4 proj;
	mat4 viewInverse;
	mat4 projInverse;
	vec4 lightPos;
        vec4 attenuation;
        vec4 dir;
        vec4 specularCol;
        vec4 diffuseCol;
        float openingAngle;
        int time;
        int maxRays;
} cam;

layout(binding = 5) uniform sampler2D rasterTexture;
layout(binding = 6) uniform sampler2D normalTexture;
layout(binding = 7) uniform sampler2D dataTexture;
layout(binding = 8) uniform sampler2D depthTexture;

struct RayPayload {
	vec3 color;
	float distance;
	vec3 normal;
	float reflector;
	float diff;
};

layout(location = 0) rayPayloadNV RayPayload rayPayload;

// Max. number of recursion is passed via a specialization constant
layout (constant_id = 0) const int MAX_RECURSION = 0;
// Max. number of secondary rays (shot for diffuse effect) is passed via specialization constant
layout (constant_id = 1) const int MAX_SECONDARY = 1;

vec3 reconstructPosition(float d, vec2 tc){
	float z = d * 2.0 - 1.0;
    vec4 p = vec4(tc.xy * 2.0f - 1.0f,d,1);
    p = cam.projInverse * p; //TODO outsource inverse to cpu?
    return p.xyz/p.w;
}

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
	vec2 d = inUV * 2.0 - 1.0;



	//use gbuffer
	//color from rasterization
	vec3 color = texture(rasterTexture, inUV.xy).rgb;;
	//reconstruct pos from depth
	vec4 origin = (cam.viewInverse * vec4(reconstructPosition(texture(depthTexture, inUV.xy).r, inUV.xy),1.f));
	vec4 normal = vec4(mat3(cam.viewInverse) * texture(normalTexture, inUV.xy).rgb, 0.f);
	origin.xyz += normal.xyz * 0.001f;
	//reflect view direction at 
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 viewDir = cam.viewInverse*vec4(normalize(target.xyz), 0);
	vec4 direction = vec4(0.f);
	direction.xyz = reflect(viewDir.xyz, normal.xyz); 
	//get data (ior and diff)
	vec4 data = texture(dataTexture,inUV.xy);
	
	// set up the first ray
	//vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	//vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	//vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0);
	//vec3 color = vec3(0);
	
	uint rayFlags = gl_RayFlagsOpaqueNV;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

	
	
	//throughput -- reduce after every bounce with respect to the index of reflection
	//init with ior of first bounce
	float throughput = data.x;
		
    
    for (int i = 0; i < cam.maxRays-1; i++) { // MAX_RECURSION
		traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
		vec3 hitColor = rayPayload.color;

		if (rayPayload.distance < 0.0f) {
			color += (1-rayPayload.reflector) * throughput * hitColor;
			break;
		/*} else if (rayPayload.reflector == 1.0f) {
			const vec4 hitPos = origin + direction * rayPayload.distance;
			origin.xyz = hitPos.xyz + rayPayload.normal * 0.001f;
			direction.xyz = reflect(direction.xyz, rayPayload.normal);
		*/
		} else {//if(throughput > 0.005f){
			
			// throuput 1 am anfang
			// 1. hit soll 1-ior beitragen
			// throughput muss sinken: ior = 1 -> throughput bleibt gleich
			//						   ior klein -> throughput wird deutlich kleiner (-> throughput *= ior)
			const vec4 hitPos = origin + direction * rayPayload.distance;
			
			origin.xyz = hitPos.xyz + rayPayload.normal * 0.001f;
			direction.xyz = reflect(direction.xyz, rayPayload.normal); 
			color += (1-rayPayload.reflector) * throughput * hitColor;
			
			throughput *= rayPayload.reflector;

			

		}

	}
	
	imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(color, 0.0));
}
