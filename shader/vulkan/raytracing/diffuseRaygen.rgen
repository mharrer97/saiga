#version 460
#extension GL_NV_ray_tracing : require

#define M_PI 3.1415926535897932384626433832795

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
	vec4 lightPos;
        vec4 attenuation;
        vec4 dir;
        vec4 specularCol;
        vec4 diffuseCol;
        float openingAngle;
        int time;
} cam;


struct RayPayload {
	vec3 color;
	float distance;
	vec3 normal;
	float reflector;
	float diff;
};

layout(location = 0) rayPayloadNV RayPayload rayPayload;

// Max. number of recursion is passed via a specialization constant
layout (constant_id = 0) const int MAX_RECURSION = 0;
// Max. number of secondary rays (shot for diffuse effect) is passed via specialization constant
layout (constant_id = 1) const int MAX_SECONDARY = 2;




//simple preudo random number generator
// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}
float rand( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }

vec4 getQuaternion(vec3 axis, float angle){
	vec4 q;
	float half_angle = angle/2;
	q.x = axis.x * sin(half_angle);
	q.y = axis.y * sin(half_angle);
	q.z = axis.z * sin(half_angle);
	q.w = cos(half_angle);
	return q;
}
vec4 quat_mult(vec4 q1, vec4 q2)
{ 
  vec4 qr;
  qr.x = (q1.w * q2.x) + (q1.x * q2.w) + (q1.y * q2.z) - (q1.z * q2.y);
  qr.y = (q1.w * q2.y) - (q1.x * q2.z) + (q1.y * q2.w) + (q1.z * q2.x);
  qr.z = (q1.w * q2.z) + (q1.x * q2.y) - (q1.y * q2.x) + (q1.z * q2.w);
  qr.w = (q1.w * q2.w) - (q1.x * q2.x) - (q1.y * q2.y) - (q1.z * q2.z);
  return qr;
}
vec3 offsetVec3(float offsetIntensity, vec3 seed, vec4 quaternionRot){ // offsetIntensity: range: 0:1 -- 0=nooffset, 1=bigoffset   seed: used for rng
	//get random vec to offset the reflected direction (represents two angles -> one between 0:90 one between -180:180
	//vec2 randomVec = vec2(rand(vec3(seed.x, seed.y, cam.time+seed.z)) * (M_PI/2.f) * offsetIntensity, (rand(vec3(seed.x-1, seed.y+2, cam.time-seed.z)) * 2.f* M_PI) - M_PI);
	
	
	//lambertian -> in every direction the same
	//get a random vector in the unitsphere and acale it to length=1
	vec4 res = vec4((rand(vec3(seed.x, seed.y, cam.time+seed.z)))*2.f-1.f, rand(vec3(seed.x-1, seed.y+2, cam.time-seed.z+1)), (rand(vec3(seed.x+2, seed.y-1, cam.time-seed.z+2)))*2.f-1.f,0.f);
	for(int i = 1; length(res) > 1.f; ++i){
		res = vec4(rand(vec3(seed.x+i, seed.y, cam.time+seed.z)), rand(vec3(seed.x-1, seed.y+2+i, cam.time-seed.z+1)), rand(vec3(seed.x+2, seed.y-1, cam.time-seed.z+2+i)),0.f);
	}
	res= normalize(res);
	
	
	
	//first, rotate around (1,0,0) by randomVec.x
	//start with (0,1,0)
	/*vec4 res = vec4(0.f,1.f,0.f,0.f);
	vec4 rot = normalize(getQuaternion(vec3(1.f,0.f,0.f), randomVec.x));
	vec4 rotInv = vec4(-rot.xyz, rot.w);
	res = quat_mult(quat_mult(rotInv, res), rot);
	
	//secondly, roate around (0,1,0) by randomVec.y
	rot = normalize(getQuaternion(vec3(0.f,1.f,0.f), randomVec.x));
	rotInv = vec4(-rot.xyz, rot.w);
	res = quat_mult(quat_mult(rotInv, res), rot);*/
	
	//rotate offsetted vector from tangent space to world space 
	vec4 quatinv = vec4(-quaternionRot.xyz, quaternionRot.w);		
	return quat_mult(quat_mult(quatinv, res), quaternionRot).xyz;
}

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
	vec2 d = inUV * 2.0 - 1.0;

	// set up the first ray
	vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0);

	uint rayFlags = gl_RayFlagsOpaqueNV;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

	vec3 color = vec3(0.0);
	
	//throughput -- reduce after every bounce with respect to the index of reflection
	float throughput = 1.f;
	
	//trace the eye ray	
	traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
    
    vec3 hitColor = rayPayload.color;
    //add the color
    //color += (1-rayPayload.reflector) * throughput * hitColor;
    color +=  throughput * hitColor;
	//calculate, how much he secondary rays should contribute
    //throughput *= rayPayload.reflector;
    // store how much the reflection should be offsetted
    float diff = rayPayload.diff;
    
    //data used for tracing secondary
    vec4 secOrigin;
    vec4 secDirection;
    
    // reflect eye ray to get center of secondary reflection
    vec3 reflected = normalize(reflect(direction.xyz, rayPayload.normal)); 
    
    //stores the color of all secondary to average over them
    vec3 secColor = vec3(0);
    
    //set up one secondary ray
	const vec4 hitPos = origin + direction * rayPayload.distance;
		
		
		
		
	//calculate the quaternion, as it is always the same
	
	/*
	//mix reflected and normal to generate a reflection, in which direction the offsetted angles wont be below the surface
	//angle between reflected and normal
	float angleRN = acos(dot(normalize(rayPayload.normal), normalize(reflected)));
	//angle is between 0 and pi/2 --> scale to 0:1 and subtract from 1 to get angle between plane and reflected
	angleRN = 1.f - (angleRN/(M_PI/2));
	// get the weight -> if angleRN > diff -> no problem
	// if angleRN < diff -> action must been taken -> scale difference of diff and angleRN to 0:1 (by dividing by 1-angle) -> gives a value 0:1 that scales linearly between reflected and normal, if needed
	float alpha = (angleRN > rayPayload.diff)? 0.f : (rayPayload.diff - angleRN) / (1.f-angleRN);
	vec3 fakeReflection = mix(reflected, rayPayload.normal, alpha); //an angle so the reflected rays wont be below the surface
	*/
	
	vec3 fakeReflection = rayPayload.normal;//(rayPayload.diff > 0.5)? rayPayload.normal: reflected;
	vec4 quat = vec4(0); // = getQuaternion(axis, angle);
	if( fakeReflection == vec3(0.f,1.f,0.f)){
		quat = normalize(vec4(0.f,0.f,0.f,1.f));
	}else if(fakeReflection == vec3(0.f,-1.f,0.f)){
		//quat = normalize(vec4(1.f,0.f,0.f,0.f));	
		quat = normalize(getQuaternion(vec3(1.f,0.f,0.f), M_PI));	
	}else
	{
		vec3 half_v = normalize(fakeReflection + vec3(0.f,1.f,0.f));
		quat = normalize(vec4(cross(fakeReflection,half_v),dot(fakeReflection, half_v)));
	}
	
	//float tmp = float(MAX_SECONDARY);
	//float tmp2 = tmp * rayPayload.diff;
	int secRayCount = 3;//max(int(tmp2), 1);
	
    for (int i = 0; i < secRayCount; i++) {
		
		secOrigin.xyz = hitPos.xyz + rayPayload.normal * 0.001f;
		secDirection.xyz = offsetVec3(diff, vec3(inUV, i), quat);
			
		//trace secondary ray
		traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, secOrigin.xyz, tmin, secDirection.xyz, tmax, 0);
		vec3 hitColor = rayPayload.color;

		
		//secColor += ((1-rayPayload.reflector) * throughput * hitColor)/MAX_SECONDARY;
		secColor += (throughput * hitColor)/secRayCount;
			

	}
	color += secColor/M_PI; //lambertian reflection -> divide by pi for energy conversation

	//color = secDirection.xyz;
	
	imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(color, 0.0));
}
